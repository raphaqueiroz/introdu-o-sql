import{t as l}from"./viewUtil.d3db7249.js";class g{static betterArray(){Array.prototype.distinct||(Array.prototype.distinct=function(t){const r={};return this.filter(i=>{let e=i;return t instanceof Function?e=t(i):t!=null&&(e=i[t]),r[e]?!1:(e!=null&&(r[e]=1),!0)})})}static arrayToObj(t,r,i){return Array.isArray(t)?t.reduce((e,o)=>{const n=r instanceof Function?r(o):o[r];return e[n]=i?o[i]:o,e},{}):t}static clone(t){return t.map(r=>({...r}))}static getMax(t,r){let i=0;for(const e of t)i=Math.max(i,r(e));return i}static sum(t,r){return t.reduce((e,o)=>e+i(o,r),0);function i(e,o){let n=e;if(n&&o)for(const f of o.split("."))n=n==null?void 0:n[f];return l(n)}}static grouping(t,r){const{keyGenerator:i,groupGenerator:e,keepSingle:o}=r,n=[],f={};for(const s of t){const c=i(s);if(c){const u=f[c];if(u)u.addChild(s);else{const a=e(c,s);a.addChild(s),n.push(a),f[c]=a}}else n.push(s)}if(o)return n;for(let s=0;s<n.length;s++){const u=n[s].childs;!u||u.length==1&&n.splice(s,1,u[0])}return n}static isMultipleResult(t){if(!Array.isArray(t))return!1;for(const r of t)if(Array.isArray(r))return!0}}export{g as A};
